# Ultralytics YOLO 🚀, AGPL-3.0 license
# YOLO11物体检测模型，输出P3-P5。使用示例请参见https://docs.ultralytics.com/tasks/detect

# 参数
nc: 80 # 类别数量
scales: # 模型复合缩放常数，即'model=yolo11n.yaml'将会以'n'的缩放调用yolo11.yaml
  # [深度, 宽度, 最大通道数]
  n: [0.50, 0.25, 1024] # 概要：319层，2624080参数，2624064梯度，6.6 GFLOPs
  s: [0.50, 0.50, 1024] # 概要：319层，9458752参数，9458736梯度，21.7 GFLOPs
  m: [0.50, 1.00, 512] # 概要：409层，20114688参数，20114672梯度，68.5 GFLOPs
  l: [1.00, 1.00, 512] # 概要：631层，25372160参数，25372144梯度，87.6 GFLOPs
  x: [1.00, 1.50, 512] # 概要：631层，56966176参数，56966160梯度，196.0 GFLOPs

# YOLO11n主干网络
backbone:
  # [from, 重复次数, 模块, 参数]
  - [-1, 1, MF_13, [3]] # 0 in_rgb, in_ir, out
#  - [-1, 1, Conv, [64, 3, 2]] # 1-P1/2 表示这一层的输出是P1（从上一层的输出开始）并且它的分辨率是原图的一半。
  - [-1, 1, Conv, [128, 3, 2]] # 1-P2/4
  - [-1, 2, C3k2, [256, False, 0.25]]
  - [-1, 1, Conv, [256, 3, 2]] # 3-P3/8 输出特征图的分辨率是原图的四分之一
  - [-1, 2, C3k2, [512, False, 0.25]]
  - [-1, 1, Conv, [512, 3, 2]] # 5-P4/16
  - [-1, 2, C3k2, [512, True]]
  - [-1, 1, Conv, [1024, 3, 2]] # 7-P5/32
  - [-1, 2, C3k2, [1024, True]]
  - [-1, 1, SPPF, [1024, 5]] # 9
  - [-1, 2, C2PSA, [1024]] # 10

# YOLO11n头部
head:
  - [4, 1, Conv, [128, 1, 1]] # 11 downsample backbone P3
  - [6, 1, Conv, [256, 1, 1]] # 12 downsample backbone P4

  - [[11, 12], 1, ASFF2, [128, 0]] # 13
  - [[11, 12], 1, ASFF2, [256, 1]] # 14
  - [-2, 1, C3k2, [128, False]] # 15
  - [-2, 1, C3k2, [256, False]] # 16

  - [10, 1, Conv, [512, 1, 1]] # 17 downsample backbone P5

  - [[15, 16, 17], 1, ASFF3, [128, 0]] # 18
  - [[15, 16, 17], 1, ASFF3, [256, 1]] # 19
  - [[15, 16, 17], 1, ASFF3, [512, 2]] # 20

  - [18, 1, C3k2, [256, False]]  # 21 (P3/8-small)
  - [19, 1, C3k2, [512, False]]  # 22 (P4/16-medium)
  - [20, 1, C3k2, [1024, False]]  # 23 (P5/32-large)
  - [[21, 22, 23], 1, Detect, [nc]]  # Detect(P3, P4, P5)



# Ultralytics YOLO 🚀, AGPL-3.0 license
# YOLO11物体检测模型，输出P3-P5。使用示例请参见https://docs.ultralytics.com/tasks/detect

# 参数
nc: 80 # 类别数量
scales: # 模型复合缩放常数，即'model=yolo11n.yaml'将会以'n'的缩放调用yolo11.yaml
  # [深度, 宽度, 最大通道数]
  n: [ 0.50, 0.25, 1024 ] # 概要：319层，2624080参数，2624064梯度，6.6 GFLOPs
  s: [ 0.50, 0.50, 1024 ] # 概要：319层，9458752参数，9458736梯度，21.7 GFLOPs
  m: [ 0.50, 1.00, 512 ] # 概要：409层，20114688参数，20114672梯度，68.5 GFLOPs
  l: [ 1.00, 1.00, 512 ] # 概要：631层，25372160参数，25372144梯度，87.6 GFLOPs
  x: [ 1.00, 1.50, 512 ] # 概要：631层，56966176参数，56966160梯度，196.0 GFLOPs

# YOLO11n主干网络
backbone:
  # [from, 重复次数, 模块, 参数]
  - [ -1, 1, MF_13, [ 3 ] ] # 0 in_rgb, in_ir, out

  - [ -1, 1, Conv, [ 128, 3, 2 ] ] # 1-P2/4
  - [ -1, 2, C3k2, [ 256, False, 0.25 ] ]
  - [ -1, 1, FEM, [128]]

  - [ -1, 1, Conv, [ 256, 3, 2 ] ] # 3-P3/8 输出特征图的分辨率是原图的四分之一
  - [ -1, 2, C3k2, [ 512, False, 0.25 ] ]
  - [ -1, 1, FEM, [256]]

  - [ -1, 1, Conv, [ 512, 3, 2 ] ] # 5-P4/16
  - [ -1, 2, C3k2, [ 512, True ] ]

  - [ -1, 1, SPPF, [ 1024, 5 ] ] # 9
  - [ -1, 2, C2PSA, [ 1024 ] ] # 10

# YOLO11n头部
head:
  - [ -1, 1, nn.Upsample, [ None, 2, "nearest" ] ] # 上采样操作，将特征图的大小扩大2倍
  - [ [ -1, 6 ], 1, FFM_Concat2, [ 1 ] ] # cat主干网络P4 拼接P4特征图 [-1, 6]在task的concat中进行的拼接
  - [ -1, 2, C3k2, [ 256, False ] ] # 13

  - [ -1, 1, nn.Upsample, [ None, 2, "nearest" ] ]
  - [ [ -1, 3 ], 1, FFM_Concat2, [ 1 ] ] # cat主干网络P3
  - [ -1, 2, C3k2, [ 128, False ] ] # 16 (P3/8-small)

  - [ -1, 1, Conv, [ 256, 3, 2 ] ]
  - [ [ -1, 6, 14 ], 1, FFM_Concat3, [ 1 ] ] # cat头部P4
  - [ -1, 2, C3k2, [ 256, False ] ] # 19 (P4/16-medium)

  - [ -1, 1, Conv, [ 512, 3, 2 ] ]
  - [ [ -1, 10 ], 1, FFM_Concat2, [ 1 ] ] # cat头部P5
  - [ -1, 2, C3k2, [ 512, True ] ] # 22 (P5/32-large)

  - [ 16, 1, SCAM, [ ] ] # 24
  - [ 19, 1, SCAM, [ ] ] # 25
  - [ 22, 1, SCAM, [ ] ] # 26

  - [ [ 23, 24, 25 ], 1, Detect, [ nc ] ] # Detect(P3, P4, P5) 检测层会将来自P3、P4和P5的特征图输入，进行最终的目标检测。
